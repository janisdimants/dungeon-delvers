<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise variables
scr_get_base_ui();
// settings
selected = false;
last_selected = false;
selectable = true;
previous = undefined;
next = undefined;
action = undefined;
action_snd = snd_menu_submenu_open;
text = "";
text_size = 10;
text_spacing = 1;
select_padding = 0;
cooldown = 0.2;

// These two get set automatically within alarm 0
alarm[0] = 1;
element_width = 0;
element_height = 0;

// runtime
was_unselected = false;
input_cooldown = 0;
accept_cooldown = 0;
image_speed = 0;
depth = -10000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update width and height variables
if (string_length(text) &gt; 0) {
  element_width = scr_get_text_width(text, text_size, text_spacing);
  element_height = text_size;
} else {
  element_width = sprite_width;
  element_height = sprite_height;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Selection and navigation

var _trigger_sound = false;

if (!selectable) { exit; }

// Reselect if it's last selected
if (!selected &amp;&amp; last_selected) {
  scr_get_input();
  
  if (input_y != 0) {
    selected = true;
    input_cooldown = cooldown;
    _trigger_sound = true;
  }
}

// Update last_selected
if (selected &amp;&amp; !last_selected) {
  obj_ui_element.last_selected = false;
  last_selected = true;
}

// Mouse selection
scr_get_base_ui();
if (global.mouse_moved) {
  var _mx = window_mouse_get_x();
  var _my = window_mouse_get_y();
  
  selected = (_mx &gt; x * scale_x &amp;&amp;
      _mx &lt; (x+element_width) * scale_x &amp;&amp;
      _my &gt; y * scale_y &amp;&amp;
      _my &lt; (y+element_height) * scale_y
  );
  
  if (selected &amp;&amp; !was_unselected) {
    was_unselected = true;
    _trigger_sound = true;
  }
  
  if (!selected &amp;&amp; was_unselected) {
    was_unselected = false;
  }
}

// Update cooldowns
scr_frame_time_independant();
if (input_cooldown &gt; 0) {
  input_cooldown -= frame_time_indep;
}
if (accept_cooldown &gt; 0) {
  accept_cooldown -= frame_time_indep;
}


// Keyboard input
if (selected) {
  scr_get_input();
  
  // Action
  if (accept_key &amp;&amp; accept_cooldown &lt;= 0 &amp;&amp; action) {
    script_execute(action);
    
    if (action_snd) {
        audio_play_sound(action_snd, 0, false);
    }

    accept_cooldown = cooldown;
    /// Debug - clear mouse for HTML5 specific input bug
    mouse_clear(mb_any); 
  }
  
  if (input_cooldown &lt;= 0) {
    // Navigate up
    if (input_y &lt; 0 &amp;&amp; previous) {
      previous.selected = true;
      previous.input_cooldown = cooldown;
      selected = false;
      _trigger_sound = true; 
    }
    
    // Navigate down
    if (input_y &gt; 0 &amp;&amp; next) {
      next.selected = true;
      next.input_cooldown = cooldown;
      selected = false;
      _trigger_sound = true;
    }
  }
}

if (_trigger_sound) {
    audio_play_sound(snd_menu_hover, 0, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw UI element on GUI layer
scr_get_base_ui();

// Draw selection under sprite

/*if (selected) {
  draw_set_colour(image_blend);
  draw_set_alpha(0.3);
  
  draw_rectangle(
    (x-select_padding) * scale_x,
    (y-select_padding) * scale_y,
    (x+element_width+(select_padding*2)) * scale_x,
    (y+element_height+(select_padding*2)) * scale_y,
    0
  );
  
  draw_set_colour($fff);
  draw_set_alpha(1);
}*/

var _col = $dddddd;

if (!selectable || selected) {
  _col = image_blend;
}

var _x = x * scale_x;
var _y = y * scale_y;

if (sprite_index &gt; -1) {
  draw_sprite_ext(
    sprite_index,
    image_index,
    _x,
    _y,
    (image_xscale) * scale_x,
    (image_yscale) * scale_y,
    image_angle,
    _col,
    image_alpha
  );
}

if (string_length(text) &gt; 0) {
  scr_draw_text(_x, _y, text_size, text, false);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do not draw in game
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
